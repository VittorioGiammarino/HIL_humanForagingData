#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 17 13:09:39 2020

@author: vittorio
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import HierarchicalImitationLearning as hil

# %% Download Data
folder_name = 'WILD_P03_crow_2'
action_space = 20

Labels_dict_degrees, Labels_dict_rad, data_manip = hil.PreprocessData(folder_name, action_space)


# %% Plot entire data set

fig = plt.figure()
plot_data = plt.scatter(data_manip[:,2], data_manip[:,3], c=data_manip[:,1], marker='o', cmap='cool')
cbar = fig.colorbar(plot_data, ticks=[10, 100, 200, 300, 400, 500])
cbar.ax.set_yticklabels(['time = 0', 'time = 100', 'time = 200', 'time = 300', 'time = 400', 'time = 500'])
plt.xlabel('x')
plt.ylabel('y')
plt.savefig('Figures/FiguresExpert/Expert_{}_wholeData.eps'.format(folder_name), format='eps')
plt.show()


# %%
Expert_trajs = hil.BatchTrainingSet_velocity(data_manip)
Expert_trajs_generated = hil.EvaluateActionSpaceDiscretization(Expert_trajs)

# %% Plot Expert's Data

traj = 0

fig = plt.figure()
plot_traj = plt.scatter(Expert_trajs[traj][:,2], Expert_trajs[traj][:,3], c=Expert_trajs[traj][:,1], marker='o', cmap='cool')
cbar = fig.colorbar(plot_traj, ticks=[10, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500])
cbar.ax.set_yticklabels(['t = 0','t = 50', 't = 100', 't = 150', 't = 200', 't = 250', 't = 300', 't = 350', 't = 400', 't = 450', 't = 500'])
plt.xlabel('x')
plt.ylabel('y')
plt.savefig('Figures/FiguresExpert/Expert_{}_traj{}.eps'.format(folder_name,traj), format='eps')
plt.show()

# %% Plot Expert's Data generated by discretization action space

fig = plt.figure()
plot_traj = plt.scatter(Expert_trajs_generated[traj][:,2], Expert_trajs_generated[traj][:,3], c=Expert_trajs_generated[traj][:,1], marker='o', cmap='cool')
cbar = fig.colorbar(plot_traj, ticks=[10, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500])
cbar.ax.set_yticklabels(['t = 0','t = 50', 't = 100', 't = 150', 't = 200', 't = 250', 't = 300', 't = 350', 't = 400', 't = 450', 't = 500'])
plt.xlabel('x')
plt.ylabel('y')
plt.savefig('Figures/FiguresExpert/ExpertGenerated_{}_traj{}.eps'.format(folder_name,traj), format='eps')
plt.show()

# %%
TrainingSet = (Expert_trajs[traj][:,2:4])/1000 
labels = Expert_trajs[traj][:,5]

# %% Initialization
option_space = 2
# action space
termination_space = 2
size_input = TrainingSet.shape[1]

NN_options = hil.NN_options(option_space, size_input)
NN_actions = hil.NN_actions(action_space, size_input)
NN_termination = hil.NN_termination(termination_space, size_input)

N=10 #Iterations
zeta = 0.1 #Failure factor
mu = np.ones(option_space)*np.divide(1,option_space) #initial option probability distribution

gain_lambdas = np.logspace(0, 1.5, 4, dtype = 'float32')
gain_eta = np.logspace(1, 3, 3, dtype = 'float32')
ETA, LAMBDAS = np.meshgrid(gain_eta, gain_lambdas)
LAMBDAS = LAMBDAS.reshape(len(gain_lambdas)*len(gain_eta),)
ETA = ETA.reshape(len(gain_lambdas)*len(gain_eta),)

Triple = hil.Triple(NN_options, NN_actions, NN_termination)

env = 'human_foraging'
max_epoch = 1000

ED = hil.Experiment_design(labels, TrainingSet, size_input, action_space, option_space, termination_space, N, zeta, mu, 
                           Triple, LAMBDAS, ETA, env, max_epoch)

lambdas = tf.Variable(initial_value=1.*tf.ones((option_space,)), trainable=False)
eta = tf.Variable(initial_value=100., trainable=False)   
    

# %% HMM order estimation

Model_orders = [2]
Likelihood = np.empty(0) 
for d in Model_orders:
    Likelihood = np.append(Likelihood, -hil.HMM_order_estimation(d, ED))
    
with open('Variables_saved/likelihood.npy', 'wb') as f:
    np.save(f,[Likelihood, Model_orders])
    
# %% Plot Figure
 	
# with open('Variables_saved/likelihood.pickle', 'rb') as f:
#     Likelihood, Model_orders = pickle.load(f)

with open('Variables_saved/likelihood.npy', 'rb') as f:
    Likelihood, Model_orders = np.load(f)

fig = plt.figure()
plot_action = plt.plot(Model_orders, Likelihood,'o--');
plt.xlabel('Model Order')
plt.ylabel('Lower bound for the Likelihood')
plt.savefig('Figures/FiguresHIL/Likelihood_over_order.eps', format='eps')
plt.show()    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

   